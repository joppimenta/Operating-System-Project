CODE	SEGMENT PUBLIC 'CODE'
        ASSUME CS:CODE, SS:STACK, DS:DATA
	
DATA	  SEGMENT PARA 'VERI'
BUTTONS   DB 10H ,10H,0H,10H, 10H, 3H, 2H, 1H, 10H, 6H, 5H, 4H, 10H, 9H, 8H, 7H
NUMBER1   DB 00H ; Armazena o primeiro numero
ISLEM     DB 00H ; Armazena qual é a operação
NUMBER2   DB 00H ; Armazena o segundo número
RESULT    DB 00H ; Resultado
FLAG      DB 00H
DATA ENDS

STACK SEGMENT STACK 'STACK'

	 DW 256 DUP(0)
	 
STACK ENDS

START:
     ; Inicialização do segmento de dados
	 PUSH DS
	 XOR AX,AX
	 PUSH AX
	 MOV AX, DATA
	 MOV DS, AX
	 
	 ; Portas de conexão do 8255A
	 PORTA EQU 200H	 ; Endereço da porta A (display de 7 segmentos)	
	 PORTB EQU 202H ; Endereço da porta B (entrada de dados do teclado)
	 PORTC EQU 204H ; Endereço da porta C (controle do teclado). Geração de sinais de controle
	 CW    EQU 206H ; Endereço do controle do chip
	 
	 ; Configuração inicial do chip de controle (8255A)
	 MOV DX, CW		
	 MOV AL, 0A7h			; Configuração do modo de operação do 8255A (modo 10100111) 
	 
	 ; D7 = 1: Reserved bit. This must be 1, as per the 8255A datasheet.
	 ; D6 = 0: This bit is used to determine the grouping of ports. 0 means individual control.
	 ; D5 = 1: This bit defines the operation mode for Port A. 1 indicates Mode 1 (Strobed I/O).
	 ; D4 = 0: This bit defines the operation mode for Port B. 0 indicates Mode 0 (Basic I/O).
	 ; D3 = 0: This bit controls the direction of Port A. 0 means Port A is set to output.
	 ; D2 = 1: This bit controls the direction of Port B. 1 means Port B is set to input.
	 ; D1 = 1: This bit controls the direction of Port C (lower half). 1 means Port C (lower half) is set to input.
	 ; D0 = 1: This bit controls the direction of Port C (upper half). 1 means Port C (upper half) is set to input.
	 
	 OUT DX, AL				; Envia o valor para o controle do chip

ENDLESS:

	; check INTRB
	CONTROL1:
	XOR AX,AX       
	MOV DX, PORTC
	IN AL, DX
	TEST AL, 01H
	JNZ CONTROL1
	
	MOV DX, PORTB
	IN AL,DX		; read first digit
	
	XOR BX, BX	
	MOV BL,AL		; Armazena primeiro dígito em BL	
	
	; check INTRA
	FIRST_READ:
	MOV DX, PORTC	
	IN AL,DX
	AND AL,08H
	CMP AL,00
	JNE FIRST_READ
	
	; Verifica se o botão pressionado não é um dígito
	CMP BUTTONS[BX], 10H 
	JE ENDLESS ; Se não for, recomeça o loop
	
	
	MOV AL, BUTTONS[BX] ; take the number from the array
	MOV NUMBER1, AL		; NUMBER1 holds the first digit
	MOV DX,PORTA
	OR AL,10H			; use the second screen by making pa4 zero
	OUT DX,AL			; Envia para PORTA (display)
;----------------------------------------------------------------------------

      ; Leitura do operador
	;check INTRB
	CONTROL2:
	XOR AX,AX 
	MOV DX, PORTC
	IN AL, DX
	TEST AL, 01H
	JNZ CONTROL2
	
	; Leitura do operador
	MOV DX, PORTB
	IN AL,DX 		; Lê o operador
	XOR BX, BX
	MOV BL,AL	; Armazena o operador em BL
	
	SECOND_READ:
	MOV DX, PORTC
	IN AL,DX
	AND AL,08H 		; Look the output port is available or not by checking INTRA
	CMP AL,00
	JNE FIRST_READ
	
	CMP BUTTONS[BX], 10H
	JNE CONTROL2 	; read again If it is not a operation 
	
	MOV AL, BUTTONS[BX]
	MOV DX,PORTA 	; Let's display 0 on the led after taking the operation sign
	MOV AL,0
	OR AL,10H 		; activites the second led
	OUT DX,AL		; Envia o valor para o LED
	MOV ISLEM, BL	; Move o operador para ISLEM
	
;------------------------------------------------------------------------------

; Leitura do 2° dígito

	CONTROL3:
	XOR AX,AX		; check INTRB
	MOV DX, PORTC
	IN AL, DX
	TEST AL, 01H
	JNZ CONTROL3
	
	MOV DX, PORTB	; read second digit
	IN AL,DX
	XOR BX, BX
	MOV BL,AL
	
	THIRD_READ:
	MOV DX, PORTC
	IN AL,DX
	AND AL,08H
	CMP AL,00
	JNE CONTROL3
	
	CMP BUTTONS[BX], 10H ; wait if it is operation
	JE CONTROL3
	MOV AL, BUTTONS[BX] 
	MOV NUMBER2, AL  
;-------------------------------------------------------------------------------
	; RESULT
	
	 MOV FLAG, 1
	
	; Comparativos (SE ISLEM FOR OPERAÇÃO X, REALIZA A OPERAÇÃO)
	 SUM:
	 CMP ISLEM,00H ; if the operation button is 0, SUM
	 JNE SUBSTRACTION
	 MOV AL,NUMBER1
	 ADD AL,NUMBER2
	 MOV RESULT,AL
	 JMP PRINT
	 
	 SUBSTRACTION:
	 CMP ISLEM,04H ;if the operation button is 0, SUBSTRACTION
	 JNE MULTIPLICATION
	 MOV AL,NUMBER1
	 SUB AL,NUMBER2
	 MOV RESULT,AL
	 JMP PRINT

	 MULTIPLICATION:
	 CMP ISLEM,08H ;if the operation button is 0, MULTIPLICATION
	 JNE DIVISON
	 MOV AL,NUMBER1
	 MUL NUMBER2
	 MOV RESULT,AL
	 JMP PRINT
	 
	 DIVISON:
	 MOV AL,NUMBER1 ;if the operation button is 0, DIVISION
	 DIV NUMBER2
	 MOV RESULT,AL
	 JMP PRINT
;--------------------------------------------------------------------------	 

	 ; Parte para mostrar os resultados no display de 7 segmentos
	 PRINT:
	 MOV BL,RESULT
	 CMP BL,10
	 JAE TWO_DIGIT ; Se o resultado for maior ou igual a 10, pula para a função que executa o print dos 2 dígitos
	 JMP ONE_DIGIT ; if RESULT is one-digit, jump to ONE_DIGIT to print

	 ONE_DIGIT:
	 MOV AL,BL
	 OR AL,10H
	 CALL SHOW
	 JMP ONE_DIGIT
	 
	 TWO_DIGIT:
	 XOR AX,AX
	 MOV AL,RESULT 
	 MOV BL,10
	 DIV BL    ; divide the result by 10 (0btém a dezena)
	 MOV AL,AH ; al holds the remain part
	 OR AL,10H ; print the remain part to the second led
	 CALL SHOW
	 XOR AX,AX
	 MOV AL,RESULT
	 DIV BL
	 OR AL,20H ; left PRINT
	 CALL SHOW
	  
	 JMP TWO_DIGIT
	 	 
;--------------------------------------------------------	     
    SHOW PROC NEAR
	MOV DX, PORTA
	OUT DX,AL
	RET
	SHOW ENDP

CODE    ENDS
        END START
